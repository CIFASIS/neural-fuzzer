{
  "name": "Neural-Fuzzer",
  "tagline": "Learn from your test cases & discover bugs in your software",
  "body": "Neural-Fuzzer is an experimental fuzzer designed to use state-of-the-art Machine Learning to learn from a set of initial files. It works in two phases: **training** and **generation**.\r\n\r\n* In training mode:  it uses [long-short term memory (LSTM)](https://colah.github.io/posts/2015-08-Understanding-LSTMs/) to learn how sequences of bytes are structured. \r\n\r\n* In generation mode: it will automatically generate corrupted or unexpected files and it will try to crash a given program. \r\n\r\nNeural-Fuzzer is open-source (GPL3), powered by [keras](http://keras.io) and it is similar to [rnn-char](https://github.com/karpathy/char-rnn) and other techniques in sequence prediction.\r\n\r\n## Features\r\n\r\n* Basic triage of crashes found using GDB.\r\n* CPU and GPU supported! (you can train in GPU but later use your CPU to generate files and test your program).\r\n* Test your program while in the training phase.\r\n\r\n## Example: generation of XML files\r\n\r\nIn order to generate XML, we can use one of the pre-trained XML generators:\r\n\r\n    $ wget \"https://github.com/CIFASIS/neural-fuzzer/releases/download/0.0/0-gen-xml.lstm\"\r\n    $ wget \"https://github.com/CIFASIS/neural-fuzzer/releases/download/0.0/0-gen-xml.lstm.map\"\r\n\r\nThis generator was trained using [the XML Conformance Test Suite](https://www.w3.org/XML/Test/) (more generators are available [here](https://github.com/CIFASIS/neural-fuzzer/releases))\r\n\r\nThen, we need a seed to start the generation. For instance, to use '>'\r\n\r\n    $ mkdir seeds\r\n    $ printf \">\" > seeds/input.xml\r\n\r\nFinally, we can start producing some random xmls using the generators:\r\n\r\n    $  ./neural-fuzzer.py --max-gen-size 64 0-gen-xml.lstm seeds/\r\n      Using Theano backend.\r\n      Using ./gen-449983086021 to store the generated files\r\n      Generating a batch of 8 file(s) of size 35 (temp: 0.5 )................................... \r\n\r\nThe resulting files will be stored in a randomly named directory (e.g gen-449983086021). It is faster to generate files in a batch, instead of one by one (you can experiment with different batch sizes). In this case, one of the files we obtained is this one:\r\n\r\n```xml\r\n></p>\r\n<p><termdef id='dt-encoding'>\r\n```\r\n## Authors\r\n\r\n* Gustavo **Grieco** (dev)\r\n* Guillermo Luis **Grinblat**\r\n* Lucas **Uzal**",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}